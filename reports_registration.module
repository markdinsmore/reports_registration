<?php
/**
 * File: reports_registration.module
 * Version: 7103
 * Created: 8/9/2015
 *
 */
/**
 * @file
 * Affords administrators the ability to associate OSU courses and students with the Write 365 application
 * Creates the instructor role provides instructors with student reports (word counts, etc.)
 *
 */


/**
 * Implements hook_block_info().
 */
function reports_registration_block_info()
{
    $blocks = array();
    $blocks['instructor_links'] = array(
        'info' => t('Instructor reports'),
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function reports_registration_block_view($delta = '')
{
    if ($delta == 'instructor_links') {
        $list = array(
            'current' => l('Section List', 'reports_registration/instructor/reports'),
        );
        $theme_args = array('items' => $list, 'type' => 'ul');
        $content = theme('item_list', $theme_args);
        $block = array(
            'subject' => t('Instructor Reports'),
            'content' => $content,
        );
        if (user_access('view instructor reports')) {
            return $block;
        }

    }
}

/**
 * Define the module's roles and weights
 */
function reports_registration_default_roles()
{
    $roles = array();
    $roles ['Instructor'] = array(
        'name' => 'instructor',
        'weight' => '3'
    );
    return $roles;
}

/**
 * Implements hook_help()
 */
function reports_registration_help($path, $arg)
{
    switch ($path) {
        case 'admin/help#reports_registration';
            $output = '<h3>' . t('About:') . '</h3>';
            $output .= '<p>' . t('The Write 365 Report and Registration module affords administrators with the ability to associate classes and students with the Write 365 application.');
            $output .= '<p>' . t('Administrators will upload CSV files downloaded from Banner/DataWarehouse/Core into the Write 365 database.');
            $output .= '<h3>' . t('Useage:') . '</h3>';
            $output .= '<p>' . t('Course association files (course files) should be uploaded "one record per row" in the following format and column order:');
            $output .= '<p><table><tr><th>id (database unique auto increment value).</th>
 					<th>Instructor\'s ONID User Name (NOT ONID email address)</th>
 					<th>Instructor\'s OSU ID Number</th>
 					<th>Instructor\'s name in LMF format (e.g., Bennett, Dennis R)</th>
 					<th>Course CRN</th>
 					<th>Course Name (e.g., WR 121)</th>
 					<th>Section Number (e.g., 402)</th>
 					</tr></table></p>';
            $output .= '<p>' . t('Student enrollment files (registration files) should be uploaded "one record per row" in the following format and column order:');
            $output .= '<p><table><tr><th>Student ID number</th>
 					<th>Student\'s ONID User name (NOT ONID email address)</th>
 					<th>Student\'s Last Name</th>
 					<th>Student\'s First Name</th>
 					<th>Student\'s Email Address</th>
 					<th>Current OSU Term Number(e.g., 201601)</th>
 					<th>Coure Name (e.g., WR 121)</th>
 					<th>Instructor Name in LFM format (e.g., Bennett, Dennis R)</th>
 					<th>Course CRN</th>
 					<th>Section Number (e.g., 402)</th>
 					</tr></table></p>';
            $output .= '<strong>' . t('Please note that course files and registration files will be uploaded separately.');
            return $output;

    }
}

/**
 * Implements hook_menu().
 */
function reports_registration_menu()
{
    $items = array();
    /**
    $items['admin/config/people/reports_registration'] = array(
        'title' => 'OSU Write 365 Reports and Registration',
        'description' => 'Reports, Registration, and Configuration Page for the Oregon State University Write 365 installation.',
        'page callback' => 'drupal_get_form',
        'access arguments' => array('administer reports and registrations'),
        'type' => MENU_NORMAL_ITEM,
    );
     **/
    $items['reports_registration/instructor/reports'] = array(
      'title' => 'Section Report',
      'description' => 'Your Write 365 section listing.',
      'page callback' => 'course_list',
      'access arguments' => array('view instructor reports'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'reports_registration.pages.inc',
    );
    $items['reports_registration/instructor/course-detail'] = array(
        'title' => 'Section Report',
        'description' => 'Your Write 365 section listing.',
        'page callback' => 'course_detail',
        'access arguments' => array('view instructor reports'),
        'type' => MENU_LOCAL_TASK,
        'file' => 'reports_registration.pages.inc',
    );
    $items['reports_registration/instructor/student-detail'] = array(
        'title' => 'Section Report',
        'description' => 'Your Write 365 section listing.',
        'page callback' => 'student_detail',
        'access arguments' => array('view instructor reports'),
        'type' => MENU_LOCAL_TASK,
        'file' => 'reports_registration.pages.inc',
    );
    $items['reports_registration/administrator/adm-reports'] = array(
      'title' => 'All Sections Report (Admin)',
      'description' => 'Write 365 Course Sections.',
      'page callback' => 'adm_courses_list',
      'access arguments' => array('administer reports and registrations'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'reports_registration.pages.inc',
    );
    $items['reports_registration/administrator/adm-course-detail'] = array(
      'title' => 'All Sections Report (Admin)',
      'description' => 'Write 365 section listing.',
      'page callback' => 'adm_course_detail',
      'access arguments' => array('administer reports and registrations'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'reports_registration.pages.inc',
    );
    $items['reports_registration/administrator/adm-student-detail'] = array(
      'title' => 'All Sections Report (Admin)',
      'description' => 'Write 365 student detail.',
      'page callback' => 'adm_student_detail',
      'access arguments' => array('administer reports and registrations'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'reports_registration.pages.inc',
    );
    return $items;
}

/**
 * Implements hook_permission
 */
function reports_registration_permission()
{
    return array(
        'administer reports and registrations' => array(
            'title' => t('Administer Reports and Registrations'),
            'description' => t('Administer Module, view all instructor reports, upload student and instructor data'),
        ),
        'view instructor reports' => array(
            'title' => t('View Instructor Reports'),
            'description' => t('View Instructor Reports (cannot view student writing)'),
        ),
    );
}

/**
 * Implements hook_user_login().
 */
function reports_registration_user_login(&$edit, $account)
{

    global $user;
    if (in_array('instructor', $user->roles)) {
        drupal_set_message("Welcome back to Write 365.");
        return;
    } else {
        $instructorID = db_select('OSU_Registration_Instructor_Input', 'i')
            ->fields('i', array('onid'))
            ->condition('onid', $user->name, '=')
            ->execute()
            ->fetchAssoc();
    }
    if ($instructorID != '') {
        drupal_set_message('You are being registered as a Write 365 instructor.');
        $result = db_select('role', 'r')
            ->fields('r')
            ->condition('name', 'instructor', '=')
            ->execute()
            ->fetchAssoc();
        $rid = $result['rid'];
        $instructorRoles = array(
            'uid' => $user->uid,
            'rid' => $rid,
        );
        db_insert('users_roles')
            ->fields($instructorRoles)
            ->execute();
        drupal_set_message('Instructor role set.');
    } else {
        drupal_set_message('Welcome to Write 365.');
    }
    return;
}



